name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RELEASE_CONFIG: Release
  RELEASE_TAG: "v0.0"
  SOLUTION_FILE: Lussatite.FeatureManagement.sln

jobs:

  build:
    # note: changing build/name breaks the branch protection
    name: Build-Test

    runs-on: windows-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    # examples: "branch/9"
    - name: Store GITHUB_REF_NAME into RELEASE_REF_NAME
      run: >
        "RELEASE_REF_NAME={0}" -f ("$env:GITHUB_REF_NAME") |
        Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    # This step should output "branch" or "tag"
    - name: Store GITHUB_REF_TYPE into RELEASE_REF_TYPE
      run: >
        "RELEASE_REF_TYPE={0}" -f ("$env:GITHUB_REF_TYPE") |
        Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Calculate (short) RELEASE_HASH from GITHUB_SHA
      run: >
        "RELEASE_HASH={0}" -f ("$env:GITHUB_SHA".SubString(0,8)) |
        Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    # Take the GITHUB_REF_NAME and extract 'v\d+\.\d+.\d+' regex pattern value.
    # There might be other cruft in the string, but this should pare it down properly.
    - name: Parse version string in RELEASE_REF_NAME to RELEASE_REF_NAME_TAG
      if: ${{ env.RELEASE_REF_TYPE == 'tag' }}
      run: >
        "RELEASE_REF_NAME_TAG={0}" -f ("$env:RELEASE_REF_NAME" | Select-String -Pattern 'v\d+\.\d+.\d+').Matches.First.Value |
        Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Set RELEASE_TAG from RELEASE_REF_NAME_TAG
      if: ${{ env.RELEASE_REF_NAME_TAG != '' }}
      run: >
        "RELEASE_TAG={0}" -f ("$env:RELEASE_REF_NAME_TAG") |
        Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Set RELEASE_CREATE flag
      if: ${{ env.RELEASE_REF_TYPE == 'tag' && env.RELEASE_TAG != '' && env.RELEASE_TAG != 'v0.0' }}
      run: >
        "RELEASE_CREATE=true" |
        Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Calculate RELEASE_TAG_VERSION (Release)
      if: ${{ env.RELEASE_CREATE }}
      run: >
        "RELEASE_TAG_VERSION=${{ env.RELEASE_TAG }}" |
        Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    # The patch number is always the build run number for non-release builds
    - name: Calculate RELEASE_TAG_VERSION (Non Release / PR / Branch)
      if: ${{ !env.RELEASE_CREATE }}
      run: >
        "RELEASE_TAG_VERSION=${{ env.RELEASE_TAG }}.$env:GITHUB_RUN_NUMBER-alpha" |
        Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Calculate RELEASE_VERSION from RELEASE_TAG_VERSION
      run: >
        "RELEASE_VERSION={0}" -f ("${{ env.RELEASE_TAG_VERSION }}".Replace("v", "")) |
        Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    - name: Create artifacts/ directory
      run: New-Item -ItemType Directory -Force -Path artifacts

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: |
         3.1.x
         6.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5

    - name: Restore NuGet Packages
      run: nuget restore

    - name: Build
      run: msbuild -t:rebuild -verbosity:minimal -property:Configuration=${{ env.RELEASE_CONFIG }}

    # vstest wildcards: https://github.com/microsoft/vstest/issues/1663
    # run: vstest.console.exe tests/**.Tests/**/*.Tests.dll
    - name: .NET Framework Tests
      run: vstest.console.exe tests.Framework/**.Tests/**/*.Tests.dll

    # dotnet tests for the .NET Core 3.1 / .NET 6 xUnit Test projects
    # dotnet test command does not support wildcards and gets confused by the .NET Framework test projects

    - name: .NET Tests (NetCore31.Tests)
      run: >
        dotnet test
        tests/Lussatite.FeatureManagement.NetCore31.Tests/Lussatite.FeatureManagement.NetCore31.Tests.csproj
        --configuration ${{ env.RELEASE_CONFIG }}

    - name: .NET Tests (Net6.Tests)
      run: >
        dotnet test
        tests/Lussatite.FeatureManagement.Net6.Tests/Lussatite.FeatureManagement.Net6.Tests.csproj
        --configuration ${{ env.RELEASE_CONFIG }}

    - name: .NET Tests (SessionManagers.Configuration.Tests)
      run: >
        dotnet test
        tests/Lussatite.FeatureManagement.SessionManagers.Configuration.Tests/Lussatite.FeatureManagement.SessionManagers.Configuration.Tests.csproj
        --configuration ${{ env.RELEASE_CONFIG }}

    #- name: Environment for Publish/Pack
    #  run: env

    - name: dotnet publish
      run: >
        dotnet publish ${{ env.SOLUTION_FILE }}
        --configuration ${{ env.RELEASE_CONFIG }}
        /p:Version="${{ env.RELEASE_VERSION }}"
        /p:InformationalVersion="${{ env.RELEASE_VERSION }}"

    # The "dotnet pack" command doesn't seem to have good wildcard support?

    - name: dotnet pack (Lussatite.FeatureManagement)
      run: >
        dotnet pack
        src/Lussatite.FeatureManagement/Lussatite.FeatureManagement.csproj
        --configuration ${{ env.RELEASE_CONFIG }}
        /p:Version="${{ env.RELEASE_VERSION }}"
        --include-symbols
        --output artifacts/

    - name: dotnet pack (Lussatite.FeatureManagement.LazyCache)
      run: >
        dotnet pack
        src/Lussatite.FeatureManagement.LazyCache/Lussatite.FeatureManagement.LazyCache.csproj
        --configuration ${{ env.RELEASE_CONFIG }}
        /p:Version="${{ env.RELEASE_VERSION }}"
        --include-symbols
        --output artifacts/

    - name: dotnet pack (Lussatite.FeatureManagement.SessionManagers.Configuration)
      run: >
        dotnet pack
        src/Lussatite.FeatureManagement.SessionManagers.Configuration/Lussatite.FeatureManagement.SessionManagers.Configuration.csproj
        --configuration ${{ env.RELEASE_CONFIG }}
        /p:Version="${{ env.RELEASE_VERSION }}"
        --include-symbols
        --output artifacts/

    - name: dotnet pack (Lussatite.FeatureManagement.SessionManagers.Framework)
      run: >
        dotnet pack
        src/Lussatite.FeatureManagement.SessionManagers.Framework/Lussatite.FeatureManagement.SessionManagers.Framework.csproj
        --configuration ${{ env.RELEASE_CONFIG }}
        /p:Version="${{ env.RELEASE_VERSION }}"
        --include-symbols
        --output artifacts/

    - name: Inspect artifacts/ directory after Pack
      run: dir artifacts/

    - name: Archive nupkg-files
      uses: actions/upload-artifact@v3
      with:
        name: Lussatite.FeatureManagement.nupkg-files.${{ env.RELEASE_VERSION }}
        path: |
          artifacts/*.nupkg
          artifacts/*.snupkg
